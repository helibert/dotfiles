;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
     ;; `M-m f e R' (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     helm
     ;; ivy
     (auto-completion :variables
                      auto-completion-enable-snippets-in-popup t
                      auto-completion-enable-help-tooltip t
                      auto-completion-enable-sort-by-usage t
                      spacemacs-default-company-backends
                      '(company-files
                        company-capf
                        company-keywords
                        company-yasnippet))
     better-defaults
     emacs-lisp
     vimscript
     git
     ;; neotree
     treemacs
     (org :config
      (setq org-startup-indented t)
      :variables
          org-projectile-file "todo.org")
     markdown
     pandoc
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     (spell-checking :variables
                     spell-checking-enable-auto-dictionary t
                     spell-checking-enable-by-default nil)
     syntax-checking
     colors
     unicode-fonts
     version-control
     git
     ;; github
     ess
     csv
     json
     ;; restclient
     (latex :variables
            latex-build-command "LatexMk"
            latex-enable-auto-fill t)
     bibtex
     python
     shell-scripts
     html
     (evil-snipe :variables evil-snipe-enable-alternate-f-and-t-behaviors t)
     ranger
     pdf
     multiple-cursors
     (ibuffer :variables ibuffer-group-buffers-by 'major-mode)
     ;; (ibuffer :variables ibuffer-group-buffers-by 'projects)))
     (rebox :variables rebox-enable-in-text-mode t
                       rebox-min-fill-column 79)
     yaml
     ;; prettier
     ;; lsp
     ;; xclipboard
     ;; copy-as-format
     ;; bm
     ;; finance
     ;; imenu-list
     ;; geolocation
     ;; ruby
     ;; evil-cleverparens
     ;; unimpaired
     ;; vim-empty-lines
     )

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   ;; To use a local version of a package, use the `:location' property:
   ;; '(your-package :location "~/path/to/your-package/")
   ;; Also include the dependencies as they will not be resolved automatically.
   dotspacemacs-additional-packages '(
                                      all-the-icons
                                      python-x
                                      yasnippet-snippets
                                      transpose-frame
                                      banner-comment
                                      ;; line-comment-banner ;; maybe from github
                                      ;; (ado-mode
                                      ;;  :location (recipe :fetcher github
                                      ;;                    :repo "louabill/ado-mode"))
                                      )

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()

   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; File path pointing to emacs 27.1 executable compiled with support
   ;; for the portable dumper (this is currently the branch pdumper).
   ;; (default "emacs-27.0.50")
   dotspacemacs-emacs-pdumper-executable-file "emacs-27.0.50"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=~/.emacs.d/.cache/dumps/spacemacs.pdmp
   ;; (default spacemacs.pdmp)
   dotspacemacs-emacs-dumper-dump-file "spacemacs.pdmp"

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default nil)
   dotspacemacs-verify-spacelpa-archives nil

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style '(vim :variables
                                    vim-style-visual-feedback t
                                    vim-style-remap-Y-to-y$ t
                                    vim-style-retain-visual-state-on-shift t
                                    vim-style-visual-line-move-text nil
                                    vim-style-ex-substitute-global nil)

   ;; If non-nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(
                         doom-vibrant
                         doom-one
                         spacemacs-light
                         spacemacs-dark
                         ;; atom-one-dark
                         ;; ample
                         ;; ample-flat
                         ;; alect-dark
                         ;; alect-dark-alt
                         ;; doom-nova
                         ;; doom-molokai
                         ;; doom-vibrant
                         ;; zenburn
                         wombat
                         ;; sanityinc-tomorrow-eighties
                         ;; sanityinc-tomorrow-night
                         ;; darktooth
                         ;; monokai
                         )
   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator nil :separator-scale 1.2)
   ;; dotspacemacs-mode-line-theme '(all-the-icons :separator none :separator-scale 1.2)
   ;; dotspacemacs-mode-line-theme '(vim-powerline :separator nil :separator-scale 1.2)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   ;; dotspacemacs-default-font '("Source Code Pro"
   ;;                             :size 13
   ;;                             :weight normal
   ;;                             :width normal)
   dotspacemacs-default-font '("Consolas"
                               :size 16
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols nil

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers '(:relative t
                               :disabled-for-modes dired-mode
                                                   doc-view-mode
                                                   markdown-mode
                                                   org-mode
                                                   pdf-view-mode
                               :size-limit-kb 1000)
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server nil

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'trailing

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  )

(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump."
  )

(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."

  ;; (kill-buffer "*spacemacs*")
  ;; (when (string= "*scratch*" (buffer-name))
  ;;   (spacemacs/switch-to-scratch-buffer))

  ;; mode-line separator
  (setq powerline-default-separator 'nil)
  ;; add icons to neo tree and disable showing hidden files
  (setq neo-theme 'icons)
  (setq neo-show-hidden-files nil)
  ;; enable rainbow mode by default
  ;; (add-hook 'prog-mode-hook 'rainbow-mode)

  ;; enable scroll bars
  ;; (set-scroll-bar-mode 'right)
  ;; (toggle-horizontal-scroll-bar 1)

  ;; ;; buffer not raised sometimes when starting via hotkey
  ;; ;; (add-hook 'server-switch-hook #'raise-frame)
  ;; (add-hook 'server-switch-hook (lambda () (select-frame-set-input-focus (selected-frame))))

  ;; enable visual line mode globally, SPC t L
  (global-visual-line-mode t)

  ;; Disable comment block line highlight for spacemacs theme
  ;; (setq-default spacemacs-theme-comment-bg nil)

  ;; Comments should be auto filled
  (setq comment-auto-fill-only-comments t)

  ;; line navigation on wrapped lines
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

  ;; common for text scaling
  (define-key global-map (kbd "C-=") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)

  ;; buffer management, cycle and close
  (global-set-key (kbd "<C-tab>") 'next-buffer)
  (global-set-key (kbd "<C-iso-lefttab>") 'previous-buffer)
  (global-set-key (kbd "<C-w>") 'kill-buffer-and-window)
  ;; (global-set-key [(control f4)] 'kill-this-buffer)
  (global-set-key [(control f4)] 'kill-buffer-and-window)
  ;; new in develop: SPC wx and SPC bx now kill-buffer-and-window
  (spacemacs/set-leader-keys "bq" 'kill-buffer-and-window)
  (spacemacs/set-leader-keys "wq" 'kill-buffer-and-window)
  ;; make SPC q q kill frame instead of emacsclient instance
  (spacemacs/set-leader-keys "qq" 'spacemacs/frame-killer)
  ;; (evil-leader/set-key “q q” 'spacemacs/frame-killer)
  ;; insert banner comment
  (spacemacs/set-leader-keys "ih" 'banner-comment)

  ;; Save clipboard strings into kill ring before replacing them, now default
  ;; (setq save-interprogram-paste-before-kill t)
  ;; Do not mix Emacs kill ring and system clipboard
  ;; (setq x-select-enable-clipboard nil)

  ;; kill-all-buffers function, also closes other windows and frames
  ;; there is also the inbuilt kill-some-buffers
  (defun kill-all-buffers ()
    "Kill all buffers and close other windows and frames."
    (interactive)
    (mapc 'kill-buffer (buffer-list))
    (delete-other-windows)
    (delete-other-frames))

  ;; kill all buffers except current one
  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
    (delete-other-windows)
    (delete-other-frames))

  ;; center search results
  (advice-add 'evil-ex-search-next :after
              (lambda (&rest x) (evil-scroll-line-to-center (line-number-at-pos))))
  (advice-add 'evil-ex-search-previous :after
              (lambda (&rest x) (evil-scroll-line-to-center (line-number-at-pos))))

  ;; do not kill on visual paste over
  ;; better solutition would be to reorganize kill-ring,
  ;; i.e. reselect and paste again as in vim
  (setq-default evil-kill-on-visual-paste nil)

  ;; set ipython as python executable
  ;; (setq python-shell-interpreter "python3")
  ;; (setq py-shell-name "python3")
  ;; (setq flycheck-python-pycompile-executable "python3")
  ;; (when (executable-find "ipython")
    ;; (setq python-shell-interpreter "ipython"))

  ;; disable symlink query
  (setq vc-follow-symlinks t)

  ;; enable auto completion globally
  (global-company-mode)

  ;; company font faces
  (custom-set-faces
   '(company-tooltip-common
     ((t (:inherit company-tooltip :weight bold :underline nil))))
   '(company-tooltip-common-selection
     ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))

  ;; ;; helm, get standard behavior
  ;; ;; https://emacs.stackexchange.com/questions/3798/how-do-i-make-pressing-ret-in-helm-find-files-open-the-directory
  ;; (with-eval-after-load 'helm-files
  ;; ;;   (defun fu/helm-find-files-navigate-forward (orig-fun &rest args)
  ;; ;;     (if (and (equal "Find Files" (assoc-default 'name (helm-get-current-source)))
  ;; ;;             (equal args nil)
  ;; ;;             (stringp (helm-get-selection))
  ;; ;;             (not (file-directory-p (helm-get-selection))))
  ;; ;;         (helm-maybe-exit-minibuffer)
  ;; ;;       (apply orig-fun args)))
  ;; ;;   (advice-add 'helm-execute-persistent-action :around #'fu/helm-find-files-navigate-forward)
  ;;   (defun fu/helm-find-files-navigate-back (orig-fun &rest args)
  ;;     (if (= (length helm-pattern) (length (helm-find-files-initial-input)))
  ;;         (helm-find-files-up-one-level 1)
  ;;       (apply orig-fun args)))
  ;;   (advice-add 'helm-ff-delete-char-backward :around #'fu/helm-find-files-navigate-back))

  ;; Projectile windows fix
  (setq explicit-shell-file-name "c:/Users/liebert/AppData/Local/Programs/Git/bin/bash.exe")
  (setq projectile-generic-command "find . -type f -print0")

  ;; Latex/auctex
  ;; (setq TeX-auto-save nil)
  (setq TeX-save-query nil)
  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  ;; make auctex ask for tex master file
  ;; (setq-default TeX-master nil)
  (spacemacs/set-leader-keys-for-major-mode 'latex-mode "d" 'TeX-clean)
  ;; set pdf viewer if default isn't working
  ;; (setq TeX-view-program-selection '((output-pdf "xdg-open")))
  ;; (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
  ;;       TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
  ;;       TeX-source-correlate-start-server t)
  ;; (setq TeX-PDF-mode t)
  ;; (setq TeX-source-correlate-mode t)
  ;; (setq TeX-source-correlate-method 'synctex)
  (setq TeX-view-program-list
        '(("SumatraPDF" ("\"C:/Program Files/SumatraPDF/SumatraPDF.exe\" -reuse-instance"
                          (mode-io-correlate " -forward-search %b %n -inverse-search \"C:/Users/liebert/emacs/bin/emacsclientw.exe -n +%l %f\"") " %o"))))
  (setq TeX-view-program-selection '((output-pdf "SumatraPDF")))

  ;; set XeTeX mode in TeX/LaTeX
  ;; (add-hook 'LaTeX-mode-hook
  ;;           (lambda()
  ;;             (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))))
              ;; (setq TeX-command-default "XeLaTeX")
              ;; (setq TeX-save-query nil)))
  ;; fix gq format key (get used to ,f!)
  (evil-define-operator evil-LaTeX-fill-and-move (beg end)
    (cl-letf (((symbol-function #'fill-region) #'LaTeX-fill-region))
      (evil-fill-and-move beg end)))
  (evil-define-operator evil-LaTeX-fill (beg end)
    (cl-letf (((symbol-function #'fill-region) #'LaTeX-fill-region))
      (evil-fill beg end)))
  (evil-define-key 'normal LaTeX-mode-map "gq"
    #'evil-LaTeX-fill-and-move)
  (evil-define-key 'normal LaTeX-mode-map "gw"
    #'evil-LaTeX-fill)

  ;; org-mode setup
  (with-eval-after-load 'org
    ;; set viewer, do not use pdf-tools
    (setq org-file-apps
          '(("\\.docx\\'" . default)
            ("\\.mm\\'" . default)
            ("\\.x?html?\\'" . default)
            ("\\.pdf\\'" . default)
            (auto-mode . emacs)))
    ;; pandoc export
    (setq org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex"))))

  ;; set pandoc exe explicitly, otherwise old anaconda version is recognized
  ;; (setq pandoc-binary "c:/Users/liebert/AppData/Local/Pandoc/pandoc.exe")

  ;; tramp on windows
  (setq tramp-default-method "plink")

  ;; keywords
  (setq
    org-todo-keywords
    '((sequence "TODO(T)" "|" "DONE(D)")
      (sequence "NEXT(n)" "WAITING(w)" "LATER(l)" "|" "CANCELLED(c)")
      (sequence "[ ](t)" "[-](p)" "[?](m)" "|" "[X](d)"))
    org-todo-keyword-faces
    '(("[-]" :inherit font-lock-constant-face :weight bold)
      ("[?]" :inherit warning :weight bold)
      ("WAITING" :inherit default :weight bold)
      ("LATER" :inherit warning :weight bold)))

    ;; check for customization of export
    ;; https://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export
    ;; https://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export
    ;; https://orgmode.org/worg/org-tutorials/org-latex-export.html

  (with-eval-after-load "ox-latex"
    (setq org-latex-default-class "koma-article")
    (add-to-list 'org-latex-classes
                  '("koma-article"
                    "\\documentclass[a4paper,oneside,
                                    headings=standardclasses,
                                    egregdoesnotlikesansseriftitles,
                                    parskip=full
                                    ]{scrartcl}
                      \\usepackage{lmodern}
                      \\usepackage{mathptmx}
                      \\usepackage[T1]{fontenc}
                      \\usepackage[nswissgerman,english]{babel}"
                      ;; \\usepackage[defaultsans]{droidsans}
                      ;; \\usepackage{titlesec}
                      ;; \\titleformat*{\section}{\large\bfseries}
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

  ;; fix evil paragraph to behave like vim
  (with-eval-after-load 'evil
    (defun forward-evil-paragraph (&optional count)
      "Move forward COUNT paragraphs.
Moves point COUNT paragraphs forward or (- COUNT) paragraphs backward
if COUNT is negative.  A paragraph is defined by
`start-of-paragraph-text' and `forward-paragraph' functions."
      (let ((paragraph-start "\f\\|[ \t]*$"))
        (evil-motion-loop (dir (or count 1))
          (cond
           ((> dir 0) (forward-paragraph))
           ((not (bobp)) (start-of-paragraph-text) (beginning-of-line)))))))


  ;; ado-mode for Stata
  (add-to-list 'load-path "C:/Users/liebert/.emacs.d/.cache/quelpa/build/ado-mode/lisp")
  (require 'ado-mode)
  (setq ado-submit-default "dofile")
  (setq ado-stata-home "C:/Program Files (x86)/Stata15/")
  (setq ado-comeback-flag t)
  ;; send line to stata and move to next
  (defun ado-send-line-to-stata (&optional whole-buffer)
   (interactive)
   (ado-command-to-clip ado-submit-default whole-buffer)
   (ado-send-clip-to-stata ado-submit-default ado-comeback-flag)
   (forward-line 1))
  (define-key ado-mode-map [(control return)] 'ado-send-line-to-stata)
  (define-key ado-mode-map [(meta control return)] 'ado-send-buffer-to-stata)

  ;; add other minor modes to ado-mode
  ;; (add-hook 'ado-mode-hook #'smartparens-mode)
  (add-hook 'ado-mode-hook #'linum-mode)
  ;; (add-hook 'ado-mode-hook #'auto-fill-mode)

  ;; to skip of certain buffers when going to next/previous buffer
  ;; more extensive definition of useless buffers
  (setq spacemacs-useless-buffers-regexp '("^ ?\\*.*\\*\\(<[0-9]+>\\)?$"))

  ;; and also skip dired buffers which have no * in the buffer name
  (defun my-buffer-file-name (oldfun buffer)
    "Advise spacemacs/useful-buffer-p to exclude dired buffers"
    (if (funcall oldfun buffer)
        (not (with-current-buffer buffer
               (derived-mode-p 'dired-mode)))))
  (advice-add 'spacemacs/useful-buffer-p :around #'my-buffer-file-name)

  ;; dired open multiple files but in background w/o splitting window
  ;; (define-key dired-mode-map (kbd "F")
  ;;   (lambda ()
  ;;     (interactive)
  ;;     (mapc #'find-file (reverse (dired-get-marked-files)))))

  ;; visual block is super slow
  (define-key evil-visual-state-map "I" 'string-insert-rectangle)

  ;; Windows path
  (when (eq system-type 'windows-nt)
    ;; Make sure Unix tools are in front of `exec-path'
    (let ((bash (executable-find "bash")))
      (when bash
        (push (file-name-directory bash) exec-path)))
    ;; Update PATH from exec-path
    (let ((path (mapcar 'file-truename
                        (append exec-path
                                (split-string (getenv "PATH") path-separator t)))))
      (setenv "PATH" (mapconcat 'identity (delete-dups path) path-separator))))

  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (vimrc-mode dactyl-mode yasnippet-snippets yapfify yaml-mode xterm-color ws-butler writeroom-mode winum which-key web-mode web-beautify volatile-highlights vi-tilde-fringe uuidgen use-package unicode-fonts unfill treemacs-projectile treemacs-evil transpose-frame toc-org tagedit symon string-inflection spaceline-all-the-icons smeargle slim-mode shell-pop scss-mode sass-mode restart-emacs rebox2 ranger rainbow-mode rainbow-identifiers rainbow-delimiters pyvenv python-x pytest pyenv-mode py-isort pug-mode prettier-js popwin pippel pipenv pip-requirements persp-mode pcre2el password-generator paradox pandoc-mode ox-pandoc overseer orgit org-ref org-projectile org-present org-pomodoro org-mime org-download org-bullets org-brain open-junk-file nameless mwim multi-term move-text mmm-mode markdown-toc magit-svn magit-gitflow macrostep lorem-ipsum live-py-mode linum-relative link-hint less-css-mode json-navigator json-mode insert-shebang indent-guide importmagic impatient-mode ibuffer-projectile hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation helm-xref helm-themes helm-swoop helm-pydoc helm-purpose helm-projectile helm-org-rifle helm-mode-manager helm-make helm-gitignore helm-git-grep helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag google-translate golden-ratio gnuplot gitignore-templates gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe git-gutter-fringe+ gh-md fuzzy font-lock+ flyspell-correct-helm flycheck-pos-tip flycheck-bashate flx-ido fish-mode fill-column-indicator fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-snipe evil-org evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-escape evil-ediff evil-cleverparens evil-args evil-anzu eval-sexp-fu ess-R-data-view eshell-z eshell-prompt-extras esh-help emmet-mode elisp-slime-nav editorconfig dumb-jump dotenv-mode doom-themes doom-modeline diminish diff-hl define-word cython-mode csv-mode counsel-projectile company-web company-statistics company-shell company-quickhelp company-auctex company-anaconda column-enforce-mode color-identifiers-mode clean-aindent-mode centered-cursor-mode browse-at-remote auto-yasnippet auto-highlight-symbol auto-dictionary auto-compile auctex-latexmk aggressive-indent ace-link ace-jump-helm-line ac-ispell))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
)
